/* tslint:disable */
/* eslint-disable */
/**
 * ISDL Sentinel API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface Avatar
 */
export interface Avatar {
    /**
     * 
     * @type {number}
     * @memberof Avatar
     */
    'user_id': number;
    /**
     * 
     * @type {number}
     * @memberof Avatar
     */
    'avatar_id': number;
}
/**
 * 
 * @export
 * @interface GetAccessHistory200ResponseInner
 */
export interface GetAccessHistory200ResponseInner {
    /**
     * 
     * @type {string}
     * @memberof GetAccessHistory200ResponseInner
     */
    'date': string;
    /**
     * 
     * @type {GetAccessHistory200ResponseInnerEntering}
     * @memberof GetAccessHistory200ResponseInner
     */
    'entering': GetAccessHistory200ResponseInnerEntering;
    /**
     * 
     * @type {GetAccessHistory200ResponseInnerLeaving}
     * @memberof GetAccessHistory200ResponseInner
     */
    'leaving': GetAccessHistory200ResponseInnerLeaving;
}
/**
 * 
 * @export
 * @interface GetAccessHistory200ResponseInnerEntering
 */
export interface GetAccessHistory200ResponseInnerEntering {
    /**
     * 
     * @type {number}
     * @memberof GetAccessHistory200ResponseInnerEntering
     */
    'user_id': number;
    /**
     * 
     * @type {string}
     * @memberof GetAccessHistory200ResponseInnerEntering
     */
    'user_name': string;
    /**
     * 
     * @type {number}
     * @memberof GetAccessHistory200ResponseInnerEntering
     */
    'avatar_id': number;
    /**
     * 
     * @type {string}
     * @memberof GetAccessHistory200ResponseInnerEntering
     */
    'avatar_img_path': string;
    /**
     * 
     * @type {string}
     * @memberof GetAccessHistory200ResponseInnerEntering
     */
    'entered_at': string;
}
/**
 * 
 * @export
 * @interface GetAccessHistory200ResponseInnerLeaving
 */
export interface GetAccessHistory200ResponseInnerLeaving {
    /**
     * 
     * @type {number}
     * @memberof GetAccessHistory200ResponseInnerLeaving
     */
    'user_id': number;
    /**
     * 
     * @type {string}
     * @memberof GetAccessHistory200ResponseInnerLeaving
     */
    'user_name': string;
    /**
     * 
     * @type {number}
     * @memberof GetAccessHistory200ResponseInnerLeaving
     */
    'avatar_id': number;
    /**
     * 
     * @type {string}
     * @memberof GetAccessHistory200ResponseInnerLeaving
     */
    'avatar_img_path': string;
    /**
     * 
     * @type {string}
     * @memberof GetAccessHistory200ResponseInnerLeaving
     */
    'left_at': string;
}
/**
 * 
 * @export
 * @interface GetAttendeesList200ResponseInner
 */
export interface GetAttendeesList200ResponseInner {
    /**
     * 
     * @type {number}
     * @memberof GetAttendeesList200ResponseInner
     */
    'user_id': number;
    /**
     * 
     * @type {string}
     * @memberof GetAttendeesList200ResponseInner
     */
    'user_name': string;
    /**
     * 
     * @type {string}
     * @memberof GetAttendeesList200ResponseInner
     */
    'entered_at': string;
    /**
     * 
     * @type {string}
     * @memberof GetAttendeesList200ResponseInner
     */
    'purpose': string;
    /**
     * 
     * @type {string}
     * @memberof GetAttendeesList200ResponseInner
     */
    'status': string;
    /**
     * 
     * @type {string}
     * @memberof GetAttendeesList200ResponseInner
     */
    'place': string;
    /**
     * 
     * @type {string}
     * @memberof GetAttendeesList200ResponseInner
     */
    'grade': string;
    /**
     * 
     * @type {number}
     * @memberof GetAttendeesList200ResponseInner
     */
    'avatar_id': number;
    /**
     * 
     * @type {string}
     * @memberof GetAttendeesList200ResponseInner
     */
    'avatar_img_path': string;
}
/**
 * 
 * @export
 * @interface GetRanking200ResponseInner
 */
export interface GetRanking200ResponseInner {
    /**
     * 
     * @type {number}
     * @memberof GetRanking200ResponseInner
     */
    'user_id': number;
    /**
     * 
     * @type {string}
     * @memberof GetRanking200ResponseInner
     */
    'user_name': string;
    /**
     * 
     * @type {number}
     * @memberof GetRanking200ResponseInner
     */
    'attendance_days': number;
    /**
     * 
     * @type {string}
     * @memberof GetRanking200ResponseInner
     */
    'stay_time': string;
    /**
     * 
     * @type {string}
     * @memberof GetRanking200ResponseInner
     */
    'grade': string;
    /**
     * 
     * @type {number}
     * @memberof GetRanking200ResponseInner
     */
    'avatar_id': number;
    /**
     * 
     * @type {string}
     * @memberof GetRanking200ResponseInner
     */
    'avatar_img_path': string;
}
/**
 * 
 * @export
 * @interface GetUserById200Response
 */
export interface GetUserById200Response {
    /**
     * 
     * @type {number}
     * @memberof GetUserById200Response
     */
    'user_id': number;
    /**
     * 
     * @type {string}
     * @memberof GetUserById200Response
     */
    'user_name': string;
    /**
     * 
     * @type {string}
     * @memberof GetUserById200Response
     */
    'mail_address': string;
    /**
     * 
     * @type {number}
     * @memberof GetUserById200Response
     */
    'number_of_coin': number;
    /**
     * 
     * @type {number}
     * @memberof GetUserById200Response
     */
    'attendance_days': number;
    /**
     * 
     * @type {string}
     * @memberof GetUserById200Response
     */
    'stay_time': string;
    /**
     * 
     * @type {string}
     * @memberof GetUserById200Response
     */
    'status': string;
    /**
     * 
     * @type {string}
     * @memberof GetUserById200Response
     */
    'place': string;
    /**
     * 
     * @type {string}
     * @memberof GetUserById200Response
     */
    'grade': string;
    /**
     * 
     * @type {number}
     * @memberof GetUserById200Response
     */
    'avatar_id': number;
    /**
     * 
     * @type {string}
     * @memberof GetUserById200Response
     */
    'avatar_img_path': string;
    /**
     * 
     * @type {Array<GetUserById200ResponseAvatarListInner>}
     * @memberof GetUserById200Response
     */
    'avatar_list': Array<GetUserById200ResponseAvatarListInner>;
}
/**
 * 
 * @export
 * @interface GetUserById200ResponseAvatarListInner
 */
export interface GetUserById200ResponseAvatarListInner {
    /**
     * 
     * @type {number}
     * @memberof GetUserById200ResponseAvatarListInner
     */
    'avatar_id': number;
    /**
     * 
     * @type {string}
     * @memberof GetUserById200ResponseAvatarListInner
     */
    'avatar_name': string;
    /**
     * 
     * @type {number}
     * @memberof GetUserById200ResponseAvatarListInner
     */
    'rarity': number;
    /**
     * 
     * @type {string}
     * @memberof GetUserById200ResponseAvatarListInner
     */
    'img_path': string;
}
/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * 
     * @type {number}
     * @memberof ModelError
     */
    'code': number;
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface PostSignIn200Response
 */
export interface PostSignIn200Response {
    /**
     * 
     * @type {number}
     * @memberof PostSignIn200Response
     */
    'user_id': number;
    /**
     * 
     * @type {string}
     * @memberof PostSignIn200Response
     */
    'user_name': string;
    /**
     * 
     * @type {number}
     * @memberof PostSignIn200Response
     */
    'avatar_id': number;
    /**
     * 
     * @type {string}
     * @memberof PostSignIn200Response
     */
    'avatar_img_path': string;
}
/**
 * 
 * @export
 * @interface PostSignInRequest
 */
export interface PostSignInRequest {
    /**
     * 
     * @type {string}
     * @memberof PostSignInRequest
     */
    'mail_address': string;
    /**
     * 
     * @type {string}
     * @memberof PostSignInRequest
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface PostUserInformationRequest
 */
export interface PostUserInformationRequest {
    /**
     * 
     * @type {string}
     * @memberof PostUserInformationRequest
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof PostUserInformationRequest
     */
    'mail_address': string;
    /**
     * 
     * @type {string}
     * @memberof PostUserInformationRequest
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface PutChangePasswordRequest
 */
export interface PutChangePasswordRequest {
    /**
     * 
     * @type {string}
     * @memberof PutChangePasswordRequest
     */
    'mail_address': string;
    /**
     * 
     * @type {string}
     * @memberof PutChangePasswordRequest
     */
    'before_password': string;
    /**
     * 
     * @type {string}
     * @memberof PutChangePasswordRequest
     */
    'after_password': string;
}
/**
 * 
 * @export
 * @interface Status
 */
export interface Status {
    /**
     * 
     * @type {number}
     * @memberof Status
     */
    'user_id': number;
    /**
     * 
     * @type {string}
     * @memberof Status
     */
    'status': string;
}

/**
 * AccessHistoryApi - axios parameter creator
 * @export
 */
export const AccessHistoryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get access history
         * @param {string} date 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccessHistory: async (date: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'date' is not null or undefined
            assertParamExists('getAccessHistory', 'date', date)
            const localVarPath = `/access-history/{date}`
                .replace(`{${"date"}}`, encodeURIComponent(String(date)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccessHistoryApi - functional programming interface
 * @export
 */
export const AccessHistoryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccessHistoryApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get access history
         * @param {string} date 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccessHistory(date: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetAccessHistory200ResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAccessHistory(date, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccessHistoryApi.getAccessHistory']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AccessHistoryApi - factory interface
 * @export
 */
export const AccessHistoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccessHistoryApiFp(configuration)
    return {
        /**
         * 
         * @summary Get access history
         * @param {string} date 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccessHistory(date: string, options?: any): AxiosPromise<Array<GetAccessHistory200ResponseInner>> {
            return localVarFp.getAccessHistory(date, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AccessHistoryApi - object-oriented interface
 * @export
 * @class AccessHistoryApi
 * @extends {BaseAPI}
 */
export class AccessHistoryApi extends BaseAPI {
    /**
     * 
     * @summary Get access history
     * @param {string} date 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessHistoryApi
     */
    public getAccessHistory(date: string, options?: RawAxiosRequestConfig) {
        return AccessHistoryApiFp(this.configuration).getAccessHistory(date, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AttendeesListApi - axios parameter creator
 * @export
 */
export const AttendeesListApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get attendees list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttendeesList: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/attendees-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary update status
         * @param {Status} status request body of update status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putStatus: async (status: Status, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'status' is not null or undefined
            assertParamExists('putStatus', 'status', status)
            const localVarPath = `/status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(status, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AttendeesListApi - functional programming interface
 * @export
 */
export const AttendeesListApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AttendeesListApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get attendees list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAttendeesList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetAttendeesList200ResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAttendeesList(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AttendeesListApi.getAttendeesList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary update status
         * @param {Status} status request body of update status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putStatus(status: Status, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Status>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putStatus(status, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AttendeesListApi.putStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AttendeesListApi - factory interface
 * @export
 */
export const AttendeesListApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AttendeesListApiFp(configuration)
    return {
        /**
         * 
         * @summary Get attendees list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttendeesList(options?: any): AxiosPromise<Array<GetAttendeesList200ResponseInner>> {
            return localVarFp.getAttendeesList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary update status
         * @param {Status} status request body of update status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putStatus(status: Status, options?: any): AxiosPromise<Status> {
            return localVarFp.putStatus(status, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AttendeesListApi - object-oriented interface
 * @export
 * @class AttendeesListApi
 * @extends {BaseAPI}
 */
export class AttendeesListApi extends BaseAPI {
    /**
     * 
     * @summary Get attendees list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttendeesListApi
     */
    public getAttendeesList(options?: RawAxiosRequestConfig) {
        return AttendeesListApiFp(this.configuration).getAttendeesList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary update status
     * @param {Status} status request body of update status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttendeesListApi
     */
    public putStatus(status: Status, options?: RawAxiosRequestConfig) {
        return AttendeesListApiFp(this.configuration).putStatus(status, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AuthenticationApi - axios parameter creator
 * @export
 */
export const AuthenticationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Sign in
         * @param {PostSignInRequest} [postSignInRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSignIn: async (postSignInRequest?: PostSignInRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sign-in`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postSignInRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create user information
         * @param {PostUserInformationRequest} [postUserInformationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUserInformation: async (postUserInformationRequest?: PostUserInformationRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sign-up`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postUserInformationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Change password
         * @param {PutChangePasswordRequest} [putChangePasswordRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putChangePassword: async (putChangePasswordRequest?: PutChangePasswordRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putChangePasswordRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export const AuthenticationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthenticationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Sign in
         * @param {PostSignInRequest} [postSignInRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postSignIn(postSignInRequest?: PostSignInRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostSignIn200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postSignIn(postSignInRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.postSignIn']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create user information
         * @param {PostUserInformationRequest} [postUserInformationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postUserInformation(postUserInformationRequest?: PostUserInformationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostSignIn200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postUserInformation(postUserInformationRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.postUserInformation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Change password
         * @param {PutChangePasswordRequest} [putChangePasswordRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putChangePassword(putChangePasswordRequest?: PutChangePasswordRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putChangePassword(putChangePasswordRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.putChangePassword']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthenticationApi - factory interface
 * @export
 */
export const AuthenticationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthenticationApiFp(configuration)
    return {
        /**
         * 
         * @summary Sign in
         * @param {PostSignInRequest} [postSignInRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSignIn(postSignInRequest?: PostSignInRequest, options?: any): AxiosPromise<PostSignIn200Response> {
            return localVarFp.postSignIn(postSignInRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create user information
         * @param {PostUserInformationRequest} [postUserInformationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUserInformation(postUserInformationRequest?: PostUserInformationRequest, options?: any): AxiosPromise<PostSignIn200Response> {
            return localVarFp.postUserInformation(postUserInformationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Change password
         * @param {PutChangePasswordRequest} [putChangePasswordRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putChangePassword(putChangePasswordRequest?: PutChangePasswordRequest, options?: any): AxiosPromise<void> {
            return localVarFp.putChangePassword(putChangePasswordRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthenticationApi - object-oriented interface
 * @export
 * @class AuthenticationApi
 * @extends {BaseAPI}
 */
export class AuthenticationApi extends BaseAPI {
    /**
     * 
     * @summary Sign in
     * @param {PostSignInRequest} [postSignInRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public postSignIn(postSignInRequest?: PostSignInRequest, options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).postSignIn(postSignInRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create user information
     * @param {PostUserInformationRequest} [postUserInformationRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public postUserInformation(postUserInformationRequest?: PostUserInformationRequest, options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).postUserInformation(postUserInformationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Change password
     * @param {PutChangePasswordRequest} [putChangePasswordRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public putChangePassword(putChangePasswordRequest?: PutChangePasswordRequest, options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).putChangePassword(putChangePasswordRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AvatarListApi - axios parameter creator
 * @export
 */
export const AvatarListApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get avatar list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvatarList: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/avatar-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AvatarListApi - functional programming interface
 * @export
 */
export const AvatarListApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AvatarListApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get avatar list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAvatarList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetUserById200ResponseAvatarListInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAvatarList(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AvatarListApi.getAvatarList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AvatarListApi - factory interface
 * @export
 */
export const AvatarListApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AvatarListApiFp(configuration)
    return {
        /**
         * 
         * @summary Get avatar list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvatarList(options?: any): AxiosPromise<Array<GetUserById200ResponseAvatarListInner>> {
            return localVarFp.getAvatarList(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AvatarListApi - object-oriented interface
 * @export
 * @class AvatarListApi
 * @extends {BaseAPI}
 */
export class AvatarListApi extends BaseAPI {
    /**
     * 
     * @summary Get avatar list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AvatarListApi
     */
    public getAvatarList(options?: RawAxiosRequestConfig) {
        return AvatarListApiFp(this.configuration).getAvatarList(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProfileApi - axios parameter creator
 * @export
 */
export const ProfileApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get a user by ID
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserById: async (userId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getUserById', 'userId', userId)
            const localVarPath = `/users/{user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update my avatar
         * @param {Avatar} avatar request body of update avatar
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putAvatar: async (avatar: Avatar, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'avatar' is not null or undefined
            assertParamExists('putAvatar', 'avatar', avatar)
            const localVarPath = `/avatar`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(avatar, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProfileApi - functional programming interface
 * @export
 */
export const ProfileApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProfileApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get a user by ID
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserById(userId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUserById200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserById(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProfileApi.getUserById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update my avatar
         * @param {Avatar} avatar request body of update avatar
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putAvatar(avatar: Avatar, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Avatar>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putAvatar(avatar, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProfileApi.putAvatar']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ProfileApi - factory interface
 * @export
 */
export const ProfileApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProfileApiFp(configuration)
    return {
        /**
         * 
         * @summary Get a user by ID
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserById(userId: number, options?: any): AxiosPromise<GetUserById200Response> {
            return localVarFp.getUserById(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update my avatar
         * @param {Avatar} avatar request body of update avatar
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putAvatar(avatar: Avatar, options?: any): AxiosPromise<Avatar> {
            return localVarFp.putAvatar(avatar, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProfileApi - object-oriented interface
 * @export
 * @class ProfileApi
 * @extends {BaseAPI}
 */
export class ProfileApi extends BaseAPI {
    /**
     * 
     * @summary Get a user by ID
     * @param {number} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    public getUserById(userId: number, options?: RawAxiosRequestConfig) {
        return ProfileApiFp(this.configuration).getUserById(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update my avatar
     * @param {Avatar} avatar request body of update avatar
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    public putAvatar(avatar: Avatar, options?: RawAxiosRequestConfig) {
        return ProfileApiFp(this.configuration).putAvatar(avatar, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * RankingApi - axios parameter creator
 * @export
 */
export const RankingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get an avatar by id
         * @param {number} count 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvatarById: async (count: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'count' is not null or undefined
            assertParamExists('getAvatarById', 'count', count)
            const localVarPath = `/avatar/{count}`
                .replace(`{${"count"}}`, encodeURIComponent(String(count)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get ranking
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRanking: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ranking`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RankingApi - functional programming interface
 * @export
 */
export const RankingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RankingApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get an avatar by id
         * @param {number} count 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAvatarById(count: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetUserById200ResponseAvatarListInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAvatarById(count, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RankingApi.getAvatarById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get ranking
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRanking(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetRanking200ResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRanking(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RankingApi.getRanking']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RankingApi - factory interface
 * @export
 */
export const RankingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RankingApiFp(configuration)
    return {
        /**
         * 
         * @summary Get an avatar by id
         * @param {number} count 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvatarById(count: number, options?: any): AxiosPromise<Array<GetUserById200ResponseAvatarListInner>> {
            return localVarFp.getAvatarById(count, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get ranking
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRanking(options?: any): AxiosPromise<Array<GetRanking200ResponseInner>> {
            return localVarFp.getRanking(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RankingApi - object-oriented interface
 * @export
 * @class RankingApi
 * @extends {BaseAPI}
 */
export class RankingApi extends BaseAPI {
    /**
     * 
     * @summary Get an avatar by id
     * @param {number} count 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RankingApi
     */
    public getAvatarById(count: number, options?: RawAxiosRequestConfig) {
        return RankingApiFp(this.configuration).getAvatarById(count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get ranking
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RankingApi
     */
    public getRanking(options?: RawAxiosRequestConfig) {
        return RankingApiFp(this.configuration).getRanking(options).then((request) => request(this.axios, this.basePath));
    }
}



